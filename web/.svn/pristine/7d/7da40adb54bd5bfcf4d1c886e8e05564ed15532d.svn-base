<script>
    import { onMount,onDestroy } from "svelte";
    import { selectedMenuSort, selectedMenuSeq, selectedMenuSubSeq, selectedCetegorySeq } from "$lib/stores/menu"
    import { fetchData } from "$lib/common";
  
    let main = [];
    /**
     * @type {any[]}
     */
    let sub = [];
    /**
     * @type {any[]}
     */
    let visual = [];
    /**
     * @type {any}
     */
    let currentMenu=0;
    /**
     * @type {any}
     */
    let currentMenuSeq=1;
    let currentMenuSubSeq=0;
    let currentCetegorySeq=0;

    /**
     * @type {any[]}
     */
     let category = [];

  // selectedMenu 스토어의 변경사항 구독
  selectedMenuSort.subscribe(value => {
    currentMenu = value;
  });
  selectedMenuSeq.subscribe(value => {
    currentMenuSeq = value;
  });
  selectedMenuSubSeq.subscribe(value => {
    currentMenuSubSeq = value;
  });

  selectedCetegorySeq.subscribe(value => {
    currentCetegorySeq = value;
  });

  $:{
    if(currentMenu == 0){
      fetchDataAndSubscribe()
    }else if(currentMenu){
      fetchDataAndSubscribe()
    }

    if(currentMenuSubSeq){
      fetchDataAndCategory()
    }

    if(currentCetegorySeq){
   //   console.log(currentCetegorySeq)
    }
  }


  // 데이터 가져오기 및 구독 작업 수행 함수
  async function fetchDataAndSubscribe() {
    try {
      // currentMenu 값을 사용하여 데이터를 가져오는 등의 작업 수행
      const maindata = await fetchData("/home/getMainList", '');
      const subdata = await fetchData("/home/getSubList?val="+currentMenuSeq, '');
      const categoryList = await fetchData(`/home/categoryList?mainSeq=${currentMenuSeq}&subSeq=${currentMenuSubSeq}`,'');
      main = maindata;
      sub = subdata;
      category = categoryList;

      const visual_ = getVisual(main, currentMenu);
      visual = visual_;

    } catch (error) {
      // 예외 처리
      console.error('Error occurred during data fetching:', error);
    }
  }

  async function fetchDataAndCategory() {
    try {
      const categoryList = await fetchData(`/home/categoryList?mainSeq=${currentMenuSeq}&subSeq=${currentMenuSubSeq}`,'');
      category = categoryList;

    } catch (error) {
      // 예외 처리
      console.error('Error occurred during data fetching:', error);
    }
  }

  /**
     * @param {any[]} list
     * @param {any} idx
     */
  function getVisual(list, idx){
      var obj = [];
      obj[0] = list[idx];

      if ( idx == 0 ){
          obj[1] = list[list.length -1]
          obj[2] = list[idx+1]
      }else {
      
        if ( idx == list.length -1 ){
            obj[1] = list[idx-1]
            obj[2] = list[0]
        }else{
            obj[1] = list[idx-1]
            obj[2] = list[idx+1]
        }
      }
      //console.log(obj)
      return obj;
  }

  // @ts-ignore
  function handleMenuClick(sort, mainSeq, subSeq) {
    selectedMenuSort.set(sort);
    selectedMenuSeq.set(mainSeq);
    selectedMenuSubSeq.set(subSeq);

    selectedCetegorySeq.set(0)
  }

  </script>
<!-- 서브페이지 공통 -->
<div class="sub_visual" style={`background: url(${visual[0]?.filepath}) repeat-x;`}>
    <div class="sub_cate">
      <div class="lt_cate">
        <a href={visual[1]?.url} title={`${visual[1]?.name} 바로가기`}  on:click={() => handleMenuClick(visual[1]?.sort, visual[1]?.seq, 0)}>
          <img src="/img/common/sub_lt_btn.png" alt="이전 메뉴" />
          {visual[1]?.name}
        </a>
      </div>
      <div class="ct_cate">
        <a href={visual[0]?.url} title={`${visual[0]?.name} 바로가기`} on:click={() => handleMenuClick(visual[0]?.sort, visual[0]?.seq, 0)}>
          <strong>{visual[0]?.name}</strong>
          <p>{visual[0]?.title}</p>
        </a>
      </div>
      <div class="rt_cate">
        <a href={visual[2]?.url} title={`${visual[2]?.name} 바로가기`} on:click={() => handleMenuClick(visual[2]?.sort, visual[2]?.seq, 0)}>
          <img src="/img/common/sub_rt_btn.png" alt="다음 메뉴" />
          {visual[2]?.name}
        </a>
      </div>
    </div>
  </div>
  {#if sub.length > 0 && sub[0].title != null}
  <div class="sub_menu">
     <ul>
        {#each sub as val, i}
        <li class={val.seq === currentMenuSubSeq || (currentMenuSubSeq === 0 && i === 0) ? 'on' : ''}>
          <a href={val.url} on:click={() => handleMenuClick(visual[0]?.sort, visual[0]?.seq, val.seq)}><span>{val.title}</span> </a>
        </li>
        {/each}
      </ul>
  </div>
  {/if}
  <div class="page">
    {#each sub as val, i}
      {#if val.seq === currentMenuSubSeq}
          <h2>{val.description}</h2>
      {/if}
    {/each}
  </div>
  {#if category.length > 0 }
  <div class="at-container">
    <ul class="tab">
      {#each category as val, i}
        <!-- svelte-ignore a11y-click-events-have-key-events -->
        <li class={val.seq === currentCetegorySeq || (currentCetegorySeq === 0 && i === 0) ? 'active' : ''} on:click={() => selectedCetegorySeq.set(val.seq)}> 
          <a href={val.url}> {val.name} </a>
        </li>

      {/each}
    </ul>
  </div>
  {/if}
  <!-- //서브페이지 공통 -->