<script>
  // @ts-nocheck
  // export let data;
  import { onMount } from "svelte";
  import { fetchData } from "$lib/api/fetch";
  import { goto } from "$app/navigation";
  //import { page } from '$app/stores';

  let data = [];
  let list = []; //data.data.list;
  let searchOption = "user_id";
  let searchKeyword = "";
  
  let navigatepageNums = []; 
  let pageSize = 5;
  let pageNum = 0;

  async function page(idx) {
    pageNum = idx + 1;
    data = await fetchData("/api/userList", {
      searchOption,
      searchKeyword,
      pageSize,
      pageNum,
    });
   // console.log(data); //data
    list = data.list;
    navigatepageNums = data.navigatepageNums;
  }

  onMount(async () => {
    page(0);
  });

  // 체크 해제하거나 모두 선택하면 #chkAll 상태 변경됨
  function chkOneBox() {
    let chkAll = document.querySelector("#chkAll");
    let chkItCnt = document.querySelectorAll(".chk_it" + ":enabled").length;
    let chkItCnt_chk = document.querySelectorAll(
      ".chk_it" + ":checked:enabled"
    ).length;

    if (chkItCnt === chkItCnt_chk) {
      chkAll.setAttribute("checked", "checked");
      chkAll.checked = true;
    } else {
      chkAll.removeAttribute("checked", "checked");
      chkAll.checked = false;
    }
  }

  //#chkAll으로 체크 상태 일괄 변동됨
  function chkAllBox() {
    let chkAll = document.querySelector("#chkAll");
    let chkIt = document.querySelectorAll(".chk_it" + ":enabled");

    if (chkAll.checked == true) {
      chkIt.forEach(function (checkbox) {
        checkbox.checked = true;
      });
    }
    if (chkAll.checked == false) {
      chkIt.forEach(function (checkbox) {
        checkbox.checked = false;
      });
    }
  }

  async function deleteItems() {
    if (confirm("삭제하시겠습니까?")) {
      const chkItems = document.getElementsByClassName("chk_it");
      const selectedItems = [];

      for (let i = 0; i < chkItems.length; i++) {
        if (chkItems[i].checked) {
          selectedItems.push(chkItems[i].value); // 선택된 항목의 식별자 값을 배열에 추가
        }
      }

      const formObject = {
        chk_val: selectedItems,
      };

      await fetchData("/api/deleteUser", formObject);
      window.location.reload();
    }
  }

  function handleClick(id) {
    goto(`/admin/member_modify/${id}`, { replaceState: false });
  }
</script>

<div class="page_title">
  <h2>회원관리</h2>
</div>

<div class="search_bar">
  <form on:submit|preventDefault={() => page(0)}>
    <select name="searchOption" id="searchOption" bind:value={searchOption}>
      <option value="user_id" selected={searchOption === "user_id"}
        >회원아이디</option
      >
      <option value="nick_name" selected={searchOption === "nick_name"}
        >닉네임</option
      >
      <option value="name" selected={searchOption === "name"}>이름</option>
    </select>
    <input
      type="text"
      name="searchKeyword"
      id="searchKeyword"
      bind:value={searchKeyword}
    />
    <input type="submit" value="검색" />
  </form>
</div>

<div class="part">
  <ul class="etc_buttons">
    <li>
      <button on:click={() => goto("/admin/member_add")}>회원 추가</button>
    </li>
    <li><button on:click={deleteItems}>선택삭제</button></li>
  </ul>
  <div class="table_srcoll">
    <form>
      <table>
        <caption>회원관리</caption>
        <thead>
          <tr>
            <th><input type="checkbox" id="chkAll" on:click={chkAllBox} /></th>
            <th>아이디</th>
            <th>이름</th>
            <th>닉네임</th>
            <!-- <th>이메일</th> -->
            <th>상태</th>
            <th>가입일</th>
            <th>최종접속</th>
            <!-- <th>삭제일</th> -->
          </tr>
        </thead>

        <tbody>
          {#each list as row, i}
            <tr on:click={() => handleClick(row.id)}>
              <!-- svelte-ignore a11y-click-events-have-key-events -->
              <td on:click={() => event.stopPropagation()}><input
                  type="checkbox"
                  name="chk_it"
                  bind:value={row.id}
                  class="chk_it"
                  on:click={chkOneBox}
                /></td
              >
              <td>{row.userId}</td>
              <td>{row.name !== null ? row.name : ""}</td>
              <td>{row.nickName !== null ? row.nickName : ""}</td>
              <td>{row.state == 1 ? "정상" : "차단"}</td>
              <!-- <td>{row.email !== null ? row.email : ''}</td> -->
              <td>{row.regDate !== null ? row.regDate : ""}</td>
              <td>{row.lastLogin !== null ? row.lastLogin : ""}</td>
              <!-- <td>{row.disabled !== null ? row.disabled : ''}</td> -->
            </tr>
          {/each}
          {#if data.total === 0}
            <tr>
              <td colspan="7">게시물이 없습니다.</td>
            </tr>
          {/if}
        </tbody>
        <!-- //끝 -->
      </table>
    </form>
  </div>
  
{#if list.length > 0}
  <nav class="noselect">
    <ul class="pagination justify-content-center">
      <li class="page-item {data.hasPreviousPage ? '' : 'disabled'}" >
        <a class="page-link" on:click={() => page(data.prePage-1)} aria-label="Previous" >
          <span aria-hidden="true">이전</span>
        </a>
      </li>
      {#each navigatepageNums as pn}
      <li class="page-item {pn == data.pageNum ? 'active' : ''}" >
        <a class="page-link" on:click={() => page(pn - 1)} >{pn}</a>
      </li>
      {/each}
      <li class="page-item {data.hasNextPage ? '' : 'disabled'}" >
        <a class="page-link" on:click={() => page(data.nextPage - 1)} aria-label="Next">
          <span aria-hidden="true">다음</span>
        </a>
      </li>
    </ul>
  </nav>
{/if}
</div>

<style lang="scss">
  tr:hover {
    background-color: #f4f4f4;
    cursor: pointer;
  }
</style>
